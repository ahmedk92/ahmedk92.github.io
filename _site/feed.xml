<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 15 Dec 2017 20:57:16 +0200</pubDate>
    <lastBuildDate>Fri, 15 Dec 2017 20:57:16 +0200</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Acheiving Dynamic Localisation in iOS</title>
        <description>&lt;p&gt;While you can make your app support multiple languages, still thereâ€™s no easy (and documented) way to dynamically change the appâ€™s localisation. You either let the user chose the iOS deviceâ€™s language; and your app just follows along. Or you can use that &lt;a href=&quot;https://stackoverflow.com/q/1669645/715593&quot;&gt;AppleLanguages solution&lt;/a&gt;. But if you want the change somewhere after the app has started (i.e. not in the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function), you have to close the app, and wait for the user to open it again. Which is not the best we can expect.&lt;/p&gt;

&lt;h2 id=&quot;alternatives&quot;&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;There are many libraries (on cocoapods for example) that enables you to acheive that without closing the app. But they just work on strings; either an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; replacement, or overriding its behaviour. Which is good, but unfortunately ignore flipping views on RTL languages like Arabic.&lt;/p&gt;

&lt;h3 id=&quot;what-worked-for-me&quot;&gt;What worked for me&lt;/h3&gt;
&lt;p&gt;To organize, we have two problems: (1) flipping views based on the chosen language direction preference. (2) Guiding &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; to use the correct strings.&lt;/p&gt;

&lt;h3 id=&quot;1-flipping-views&quot;&gt;(1) Flipping views&lt;/h3&gt;
&lt;p&gt;Since iOS 9, thereâ€™s this property that enables you to decide, for a view, wether it should be always displayed left-to-right, or right-to-left (despite whatever is the language), or it should follow the language. The property is &lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiview/1622461-semanticcontentattribute&quot;&gt;semanticContentAttribute&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, the question is when to set that property to take its effect? and how? Usually, UI is diversely created; maybe from storyboards, XIBs, or code. So, an early point of initialization is a good time; e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;initWithCoder:&lt;/code&gt; (for views designed in Interface Builder) or &lt;code class=&quot;highlighter-rouge&quot;&gt;iniWithFrame&lt;/code&gt; (for views created by code). &lt;code class=&quot;highlighter-rouge&quot;&gt;awakeFromNib&lt;/code&gt; is a good time too for views designed in Interface Builder. OK, but how would we override those methods? &lt;a href=&quot;http://nshipster.com/method-swizzling/&quot;&gt;Swizzling&lt;/a&gt; to the rescue.&lt;/p&gt;

&lt;p&gt;Through swizzling, we can check the language in &lt;code class=&quot;highlighter-rouge&quot;&gt;awakeFromNib&lt;/code&gt; for example, and set the relevant &lt;code class=&quot;highlighter-rouge&quot;&gt;semanticContentAttribute&lt;/code&gt;. Good!, but there may be a little caveat. There may be some views that are required to be always left-to-right or righ-to-left all the time; we donâ€™t want to mess them up. We can avoid that by a simple check; we only apply the &lt;code class=&quot;highlighter-rouge&quot;&gt;semanticContentAttribute&lt;/code&gt; to views with an &lt;code class=&quot;highlighter-rouge&quot;&gt;.unspecified&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;So far so good. But what about currently visible views? what can we do about them? One can think of making every visible view observe the language change (via &lt;code class=&quot;highlighter-rouge&quot;&gt;NSNotificationCenter&lt;/code&gt; for example), then try to force a redraw. But I donâ€™t like this approach, and I prefer to simply restart the flow of my app. That is re-assigning the windowâ€™s root view controller with a new one, and start over the appâ€™s flow. Something like this:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeFromSuperView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;storyBoard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiateInitialViewController&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Thatâ€™s it. And it works nicely.&lt;/p&gt;

&lt;h3 id=&quot;2-nslocalizedstring&quot;&gt;(2) NSLocalizedString&lt;/h3&gt;
&lt;p&gt;As mentioned above, there are many libraries that do this. Most of them offer a replacement for &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt;. But sometimes, the dynamic localiztation feature is required so late in the project life-time that &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; is scattered all over the project. So, overriding its behavior would be better. I heard about a library that does this, but couldnâ€™t find it ðŸ˜‘. However, that overriding is not hard.&lt;/p&gt;

&lt;p&gt;I built my solution on &lt;a href=&quot;https://stackoverflow.com/a/20257557/715593&quot;&gt;this StackOverflow answer&lt;/a&gt;. The whole discussion is useful. The idea is that &lt;code class=&quot;highlighter-rouge&quot;&gt;NSLocalizedString&lt;/code&gt; is just a macro that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;localizedStringForKey:value:table:&lt;/code&gt; method of the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSBundle&lt;/code&gt; class; specifically on &lt;code class=&quot;highlighter-rouge&quot;&gt;[NSBundle mainBundle]&lt;/code&gt; instance. So, swizzling is again used here. In short, the &lt;code class=&quot;highlighter-rouge&quot;&gt;[NSBundle mainBundle]&lt;/code&gt; instanceâ€™s implementation is replaced by an &lt;code class=&quot;highlighter-rouge&quot;&gt;NSBundle&lt;/code&gt; subclass that, on language change, makes the &lt;code class=&quot;highlighter-rouge&quot;&gt;[NSBundle mainBundle]&lt;/code&gt; return a new bundle that is relevant to the selected language. Easy, but tricky.&lt;/p&gt;

&lt;p&gt;Thatâ€™s it.&lt;/p&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Maybe it wonâ€™t be enough to just have the views flipped; you may want text views (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt;) to flip the text alignment too. Thatâ€™s acheivable in our same &lt;code class=&quot;highlighter-rouge&quot;&gt;awakeFromNib&lt;/code&gt; implementation explained above. All you need is checking wether the current view is a &lt;code class=&quot;highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;, then repeat the same logic; check wether the text alignment (&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTextAlignment&lt;/code&gt;) is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;.natural&lt;/code&gt;, then set to the correct alignment (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;.left&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;.right&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 15 Dec 2017 09:00:00 +0200</pubDate>
        <link>http://localhost:4000/2017/12/15/Acheiving-Dynamic-Localisation-in-iOS.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/15/Acheiving-Dynamic-Localisation-in-iOS.html</guid>
        
        
      </item>
    
      <item>
        <title>WKWebView Horizontal Paging</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt; had a helpful property named &lt;code class=&quot;highlighter-rouge&quot;&gt;paginationMode&lt;/code&gt;. It gave you horizontal pagination out of the box; specifically using the values: &lt;code class=&quot;highlighter-rouge&quot;&gt;leftToRight&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;rightToLeft&lt;/code&gt;. However, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWebView&lt;/code&gt; is going out of favor, and since iOS 8, Apple officially encourages using &lt;code class=&quot;highlighter-rouge&quot;&gt;WKWebView&lt;/code&gt;. Unfortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;WKWebView&lt;/code&gt; doesnâ€™t have that property nor its equivalent out of the box.&lt;/p&gt;

&lt;p&gt;Thankfully, horizontal pagination (left and right) is doable using CSS. CSS has a helpful property called &lt;code class=&quot;highlighter-rouge&quot;&gt;column-width&lt;/code&gt;. Using that results in segmenting the html body into columns of the specified width. So, the idea is as follows:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Set the &lt;code class=&quot;highlighter-rouge&quot;&gt;column-width&lt;/code&gt; property of the body to the webviewâ€™s width.&lt;/li&gt;
  &lt;li&gt;Set the &lt;code class=&quot;highlighter-rouge&quot;&gt;height&lt;/code&gt; property of the body to the webviewâ€™s height.&lt;/li&gt;
  &lt;li&gt;Set &lt;code class=&quot;highlighter-rouge&quot;&gt;isPagingEnabled&lt;/code&gt; of the webviewâ€™s &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollView&lt;/code&gt; to true.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thatâ€™s it (for left to right content though). Itâ€™s up to you where to set the above values. For example, you can do it in &lt;code class=&quot;highlighter-rouge&quot;&gt;webView(_:didFinish:)&lt;/code&gt; of the webviewâ€™s &lt;code class=&quot;highlighter-rouge&quot;&gt;navigationDelegate&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;now-rtl-support&quot;&gt;Now, RTL support.&lt;/h3&gt;

&lt;p&gt;Itâ€™s as simple as setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;direction&lt;/code&gt; style property of the html tag to &lt;code class=&quot;highlighter-rouge&quot;&gt;rtl&lt;/code&gt;. But if that somehow badly affects your page, then you have to get more creative. One crazy solution is as follows:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Wrap all the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag in one container &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Set the &lt;code class=&quot;highlighter-rouge&quot;&gt;-webkit-transform&lt;/code&gt; property of that div to &lt;code class=&quot;highlighter-rouge&quot;&gt;scale(-1, 1)&lt;/code&gt;. (i.e. this results in horizontal mirroring)&lt;/li&gt;
  &lt;li&gt;Similarily, mirror the webview itself. (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;webview.transform = CGAffeineTransform(scaledX: -1, y: 1)&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits:&lt;/h3&gt;
&lt;p&gt;Thanks to my friend and colleague &lt;a href=&quot;https://www.linkedin.com/in/sayed-arfa/&quot;&gt;Sayed Arfa&lt;/a&gt; for suggesting &lt;code class=&quot;highlighter-rouge&quot;&gt;column-width&lt;/code&gt; and overall inspiration.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Nov 2017 15:23:00 +0200</pubDate>
        <link>http://localhost:4000/2017/11/03/WKWebView-Horizontal-Paging.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/11/03/WKWebView-Horizontal-Paging.html</guid>
        
        
      </item>
    
  </channel>
</rss>
