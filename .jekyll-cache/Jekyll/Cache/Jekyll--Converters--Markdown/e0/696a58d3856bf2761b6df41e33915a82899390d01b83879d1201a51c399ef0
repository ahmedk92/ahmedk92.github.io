I"HI<p>It’s not uncommon for the back-end guys to return some JSON where the type of a field is <em>either</em> a number or a string.
This causes inconvenience at the app development level where it’s not enough to declare vanilla <code class="highlighter-rouge">Codable</code> structs.
Thankfully, <code class="highlighter-rouge">Decodable</code> makes this way less messy than first imagined.
We can wrap the <em>either</em> logic in a separate <code class="highlighter-rouge">Decodable</code> type that handles this for us:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Product</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">EitherIntOrString</span>
    
    <span class="kd">struct</span> <span class="kt">EitherIntOrString</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span>
        
        <span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">Decoder</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">values</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">singleValueContainer</span><span class="p">()</span>
            <span class="k">do</span> <span class="p">{</span>
                <span class="n">value</span> <span class="o">=</span> <span class="k">try</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Int</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">string</span> <span class="o">=</span> <span class="k">try</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">int</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="kt">ParsingError</span><span class="o">.</span><span class="n">stringParsingError</span>
                <span class="p">}</span>
                
                <span class="n">value</span> <span class="o">=</span> <span class="n">int</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">enum</span> <span class="kt">ParsingError</span><span class="p">:</span> <span class="kt">Error</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">stringParsingError</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So, JSON like the following parses successfully:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">12</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w"> </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"14"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="generalizing">Generalizing</h3>

<p>We can make a generic <em>either</em> type out of this.
All we need is two <code class="highlighter-rouge">Decodable</code> types, and a converter from a type to the other.
Let’s see:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Converter</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">T1</span>
    <span class="kd">associatedtype</span> <span class="kt">T2</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">convert</span><span class="p">(</span><span class="n">_</span> <span class="nv">t2</span><span class="p">:</span> <span class="kt">T2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T1</span><span class="p">?</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">DecodableEither</span><span class="o">&lt;</span><span class="kt">T1</span><span class="p">:</span> <span class="kt">Decodable</span><span class="p">,</span> <span class="kt">T2</span><span class="p">:</span> <span class="kt">Decodable</span><span class="p">,</span> <span class="kt">C</span><span class="p">:</span> <span class="kt">Converter</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="k">where</span> <span class="kt">C</span><span class="o">.</span><span class="kt">T1</span> <span class="o">==</span> <span class="kt">T1</span><span class="p">,</span> <span class="kt">C</span><span class="o">.</span><span class="kt">T2</span> <span class="o">==</span> <span class="kt">T2</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">T1</span>

    <span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">Decoder</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">values</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">singleValueContainer</span><span class="p">()</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="k">try</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">T1</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">t2</span> <span class="o">=</span> <span class="k">try</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">T2</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">t1</span> <span class="o">=</span> <span class="kt">C</span><span class="o">.</span><span class="nf">convert</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="kt">Error</span><span class="o">.</span><span class="n">conversionError</span>
            <span class="p">}</span>
            
            <span class="n">value</span> <span class="o">=</span> <span class="n">t1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">enum</span> <span class="kt">Error</span><span class="p">:</span> <span class="kt">Swift</span><span class="o">.</span><span class="kt">Error</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">conversionError</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Let’s break this down:</p>

<ol>
  <li><code class="highlighter-rouge">DecodableEither&lt;T1: Decodable, T2: Decodable, C: Converter&gt;: Decodable</code>. 
Here we declare a generic struct that conforms to <code class="highlighter-rouge">Decodable</code>, and depends on three types.
The first two are any <code class="highlighter-rouge">Decodable</code> types.
The third is just a type that conforms to a protocol called <code class="highlighter-rouge">Converter</code> that we will use for converting from type <code class="highlighter-rouge">T2</code> to <code class="highlighter-rouge">T1</code>.</li>
  <li>The <code class="highlighter-rouge">Converter</code> protocol declares a static function that converts from a generic type to another.
Such protocol is called <em>protocol with associated types</em>, commonly called “PATs”.</li>
  <li>Now, the Swiftiest thing in this code, the type constraints. <code class="highlighter-rouge">where C.T1 == T1, C.T2 == T2</code>.
This part after the <code class="highlighter-rouge">DecodableEither</code> declaration is what ensures type-safety and makes things work together.
Here we tell the Swift compiler to ensure that any <code class="highlighter-rouge">Converter</code> type passed to us here must have its two associated types be the very two types passed to the <code class="highlighter-rouge">DecodableEither</code>.
This what makes that line <code class="highlighter-rouge">let t1 = C.convert(t2)</code> in the alternate decoding phase work, and infer correctly the given types.</li>
</ol>

<p>Now, we can use this generic type like this:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">StringToIntConverter</span><span class="p">:</span> <span class="kt">Converter</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">convert</span><span class="p">(</span><span class="n">_</span> <span class="nv">t2</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">Int</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">Product</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">DecodableEither</span><span class="o">&lt;</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">StringToIntConverter</span><span class="o">&gt;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Usage:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">json</span> <span class="o">=</span> <span class="s">"""
    [
        { "</span><span class="n">id</span><span class="s">": 12 },
        { "</span><span class="n">id</span><span class="s">": "</span><span class="mi">14</span><span class="s">" }
    ]
"""</span>
        
<span class="k">let</span> <span class="nv">products</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">JSONDecoder</span><span class="p">()</span><span class="o">.</span><span class="nf">decode</span><span class="p">([</span><span class="kt">Product</span><span class="p">]</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">json</span><span class="o">.</span><span class="nf">data</span><span class="p">(</span><span class="nv">using</span><span class="p">:</span> <span class="o">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>

<span class="n">products</span><span class="o">.</span><span class="nf">forEach</span><span class="p">({</span>
    <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">value</span><span class="p">)</span> <span class="c1">// value is Int 👍</span>
<span class="p">})</span>
</code></pre></div></div>

<p>We can also use typealisases if a particular combination is used frequently:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typealias</span> <span class="kt">DecodableEitherIntOrString</span> <span class="o">=</span> <span class="kt">DecodableEither</span><span class="o">&lt;</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">StringToIntConverter</span><span class="o">&gt;</span>

<span class="kd">struct</span> <span class="kt">Product</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">DecodableEitherIntOrString</span>
<span class="p">}</span>
</code></pre></div></div>

<p>That’s it. Thanks for reading!</p>

<h1 id="update-16-10-2019">Update (16-10-2019)</h1>

<p>I stumbled upon <a href="https://twitter.com/jsslai/status/1184536734081650690?s=20">this brilliant suggestion</a> by <a href="https://twitter.com/jsslai?s=17">Jussi Laitinen</a>.
Now, our solution can be cleaner by eliminating the third <code class="highlighter-rouge">Converter</code> type, and instead requiring our first type to be convertible from the second type. Let’s see this in code:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Convertible</span> <span class="p">{</span>
    <span class="kd">associatedtype</span> <span class="kt">T</span>
    <span class="nf">init</span><span class="p">?(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">T</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">DecodableEither</span><span class="o">&lt;</span><span class="kt">T1</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="o">&amp;</span> <span class="kt">Convertible</span><span class="p">,</span> <span class="kt">T2</span><span class="p">:</span> <span class="kt">Decodable</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">Decodable</span> <span class="k">where</span> <span class="kt">T1</span><span class="o">.</span><span class="kt">T</span> <span class="o">==</span> <span class="kt">T2</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">T1</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">Decoder</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">values</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">singleValueContainer</span><span class="p">()</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="k">try</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">T1</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">t2</span> <span class="o">=</span> <span class="k">try</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">T2</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">t1</span> <span class="o">=</span> <span class="kt">T1</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="kt">Error</span><span class="o">.</span><span class="n">conversionError</span>
            <span class="p">}</span>
            
            <span class="n">value</span> <span class="o">=</span> <span class="n">t1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">enum</span> <span class="kt">Error</span><span class="p">:</span> <span class="kt">Swift</span><span class="o">.</span><span class="kt">Error</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">conversionError</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Also, converting from <code class="highlighter-rouge">String</code> to <code class="highlighter-rouge">Int</code> is a lot simpler now, since <code class="highlighter-rouge">Int</code> already has a <a href="https://www.hackingwithswift.com/sixty/10/9/failable-initializers">failable initializer</a> that accepts a <code class="highlighter-rouge">String</code>. We just extend <code class="highlighter-rouge">Int</code> to conform to our <code class="highlighter-rouge">Convertible</code> protocol while stating that the generic/associated type <code class="highlighter-rouge">T</code> to be <code class="highlighter-rouge">String</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">Int</span><span class="p">:</span> <span class="kt">Convertible</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="kt">T</span> <span class="o">=</span> <span class="kt">String</span>
<span class="p">}</span>
</code></pre></div></div>
:ET