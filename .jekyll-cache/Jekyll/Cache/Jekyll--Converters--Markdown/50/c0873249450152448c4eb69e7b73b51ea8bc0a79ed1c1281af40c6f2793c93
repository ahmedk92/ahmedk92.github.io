I"ü<p>While you can make your app support multiple languages, still thereâ€™s no easy (and documented) way to dynamically change the appâ€™s localisation. You either let the user choose the iOS deviceâ€™s language; and your app just follows along. Or you can use that <a href="https://stackoverflow.com/q/1669645/715593">AppleLanguages solution</a>. But if you want the change somewhere after the app has started (i.e. not in the <code class="highlighter-rouge">main</code> function), you have to close the app, and wait for the user to open it again. Which is not the best we can expect.</p>

<h2 id="alternatives">Alternatives</h2>
<p>There are many libraries (on cocoapods for example) that enables you to acheive that without closing the app. But they just work on strings; either an <code class="highlighter-rouge">NSLocalizedString</code> replacement, or overriding its behaviour. Which is good, but unfortunately ignore flipping views on RTL languages like Arabic.</p>

<h3 id="what-worked-for-me">What worked for me</h3>
<p>To organize, we have two problems: (1) flipping views based on the chosen language direction preference. (2) Guiding <code class="highlighter-rouge">NSLocalizedString</code> to use the correct strings.</p>

<h3 id="1-flipping-views">(1) Flipping views</h3>
<p>Since iOS 9, thereâ€™s this property that enables you to decide, for a view, whether it should be always displayed left-to-right, or right-to-left (despite whatever is the language), or it should follow the language. The property is <a href="https://developer.apple.com/documentation/uikit/uiview/1622461-semanticcontentattribute">semanticContentAttribute</a>.</p>

<p>Now, the question is when to set that property to take its effect? and how? Usually, UI is diversely created; maybe from storyboards, XIBs, or code. So, an early point of initialization is a good time; e.g. <code class="highlighter-rouge">initWithCoder:</code> (for views designed in Interface Builder) or <code class="highlighter-rouge">iniWithFrame</code> (for views created by code). <code class="highlighter-rouge">awakeFromNib</code> is a good time too for views designed in Interface Builder. OK, but how would we override those methods? <a href="http://nshipster.com/method-swizzling/">Swizzling</a> to the rescue.</p>

<p>Through swizzling, we can check the language in <code class="highlighter-rouge">awakeFromNib</code> for example, and set the relevant <code class="highlighter-rouge">semanticContentAttribute</code>. Good!, but there may be a little caveat. There may be some views that are required to be always left-to-right or righ-to-left all the time; we donâ€™t want to mess them up. We can avoid that by a simple check; we only apply the <code class="highlighter-rouge">semanticContentAttribute</code> to views with an <code class="highlighter-rouge">.unspecified</code> value.</p>

<p>So far so good. But what about currently visible views? what can we do about them? One can think of making every visible view observe the language change (via <code class="highlighter-rouge">NSNotificationCenter</code> for example), then try to force a redraw. But I donâ€™t like this approach, and I prefer to simply restart the flow of my app. That is re-assigning the windowâ€™s root view controller with a new one, and start over the appâ€™s flow. Something like this:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">view</span> <span class="k">in</span> <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">rootViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">subviews</span> <span class="p">{</span>
    <span class="n">view</span><span class="o">.</span><span class="nf">removeFromSuperView</span><span class="p">()</span>
<span class="p">}</span>
<span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">window</span><span class="o">.</span><span class="n">rootViewController</span><span class="o">.</span><span class="n">storyBoard</span><span class="o">.</span><span class="n">instantiateInitialViewController</span> 
</code></pre></div></div>
<p>Thatâ€™s it. And it works nicely.</p>

<h3 id="2-nslocalizedstring">(2) NSLocalizedString</h3>
<p>As mentioned above, there are many libraries that do this. Most of them offer a replacement for <code class="highlighter-rouge">NSLocalizedString</code>. But sometimes, the dynamic localiztation feature is required so late in the project life-time that <code class="highlighter-rouge">NSLocalizedString</code> is scattered all over the project. So, overriding its behavior would be better. I heard about a library that does this, but couldnâ€™t find it ðŸ˜‘. However, that overriding is not hard.</p>

<p>I built my solution on <a href="https://stackoverflow.com/a/20257557/715593">this StackOverflow answer</a>. The whole discussion is useful. The idea is that <code class="highlighter-rouge">NSLocalizedString</code> is just a macro that uses <code class="highlighter-rouge">localizedStringForKey:value:table:</code> method of the <code class="highlighter-rouge">NSBundle</code> class; specifically on <code class="highlighter-rouge">[NSBundle mainBundle]</code> instance. So, swizzling is again used here. In short, the <code class="highlighter-rouge">[NSBundle mainBundle]</code> instanceâ€™s implementation is replaced by an <code class="highlighter-rouge">NSBundle</code> subclass that, on language change, makes the <code class="highlighter-rouge">[NSBundle mainBundle]</code> return a new bundle that is relevant to the selected language. Easy, but tricky.</p>

<p>Thatâ€™s it.</p>

<h3 id="notes">Notes</h3>
<ul>
  <li>Maybe it wonâ€™t be enough to just have the views flipped; you may want text views (e.g. <code class="highlighter-rouge">UILabel</code>, <code class="highlighter-rouge">UITextField</code>) to flip the text alignment too. Thatâ€™s acheivable in our same <code class="highlighter-rouge">awakeFromNib</code> implementation explained above. All you need is checking wether the current view is a <code class="highlighter-rouge">UILabel</code>, then repeat the same logic; check wether the text alignment (<code class="highlighter-rouge">NSTextAlignment</code>) is set to <code class="highlighter-rouge">.natural</code>, then set to the correct alignment (i.e. <code class="highlighter-rouge">.left</code>, or <code class="highlighter-rouge">.right</code>).</li>
</ul>

:ET